{"version":3,"sources":["ChoroplethMap.js","CompareTable.js","App.js","serviceWorker.js","index.js"],"names":["popScale","scaleLinear","domain","range","projection","width","height","config","geoMercator","rotate","scale","translate","ChoroplethMap","props","react_default","a","createElement","className","react_motion","defaultStyle","zoom","lng","lat","style","spring","stiffness","damping","center","_ref","lib","window","innerWidth","innerHeight","projectionConfig","disablePanning","geography","geographies","map","i","key","default","fill","valueMap","properties","postalCode","stroke","strokeWidth","outline","hover","pressed","onClick","onFeatureClick","onMouseEnter","onFeatureHover","titleCase","str","words","split","length","word","substring","toUpperCase","toLowerCase","join","CompareTable","zipcode","undefined","selected","rows","total","data","parseInt","push","unshift","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","totalTrees","onHover","bind","assertThisInitialized","selectArea","setState","feature","getStats","longitude","latitude","e","_this2","query","API","concat","fetch","then","response","json","_this3","src_CompareTable","src_ChoroplethMap","select","recenter","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a16fa387.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Graticule,\n} from 'react-simple-maps';\nimport { geoMercator } from 'd3-geo';\nimport { scaleLinear } from \"d3-scale\"\nimport { Motion, spring } from 'react-motion';\nimport './css/ChoroplethMap.css';\n\nconst popScale = scaleLinear()\n  .domain([0, 7500, 20000])\n  .range(['#CFD8DC', '#607D8B', '#37474F']);\n\nfunction projection(width, height, config) {\n  return geoMercator()\n    .rotate([ -73.935242, 40.730610])\n    .scale(config.scale)\n    .translate([(width) / 2, (height)/2.2])\n}\n\nconst ChoroplethMap = (props) => {\n\n  return (\n    <div className=\"map-wrapper\">\n      <Motion\n        defaultStyle={{\n          zoom: 1,\n          lng: -73.935242,\n          lat: 40.730610,\n        }}\n        style={{\n          zoom: spring(props.zoom, {stiffness: 310, damping: 50}),\n          lng: spring(props.center[0], {stiffness: 310, damping: 50}),\n          lat: spring(props.center[1], {stiffness: 310, damping: 50}),\n        }}\n      >\n      {({zoom, lng, lat}) => (\n        <ComposableMap\n          width={window.innerWidth}\n          height={window.innerHeight}\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n          }}\n          projection={projection}\n          projectionConfig={{\n            scale: 100000,\n          }}\n          >\n          <ZoomableGroup center={[lng, lat]} zoom={zoom} disablePanning={true}>\n            <Geographies geography=\"./nyczipcodetabulationareas.json\">\n              {(geographies, projection) => geographies.map((geography, i) => (\n                <Geography\n                  key={i}\n                  geography={geography}\n                  projection={projection}\n                  style={{\n                    default: {\n                      fill: popScale(props.valueMap[geography.properties.postalCode]),\n                      stroke: \"#000000\",\n                      strokeWidth: 0.75,\n                      outline: \"none\",\n                    },\n                    hover: {\n                      fill: \"#607D8B\",\n                      stroke: \"#607D8B\",\n                      strokeWidth: 0.75,\n                      outline: \"none\",\n                    },\n                    pressed: {\n                      fill: \"#FF5722\",\n                      stroke: \"#607D8B\",\n                      strokeWidth: 0.75,\n                      outline: \"none\",\n                    },\n                  }}\n                  onClick={props.onFeatureClick}\n                  onMouseEnter={props.onFeatureHover}\n                />\n              ))}\n            </Geographies>\n            <Graticule />\n          </ZoomableGroup>\n        </ComposableMap>\n      )}\n      </Motion>\n    </div>\n  )\n}\n\nexport default ChoroplethMap;\n","import React from 'react';\nimport './css/CompareTable.css'\n\nfunction titleCase(str) {\n\n\tvar words = str.split(' ');\n\n\tvar i;\n\tfor(i = 0; i < words.length; i++) {\n\t\tvar word = words[i];\n\n\t\twords[i] = word.substring(0, 1).toUpperCase() + word.substring(1, word.length).toLowerCase();\n\t}\n\n\treturn(words.join(' '));\n}\n\nconst CompareTable = (props) => {\n\n\tvar zipcode = '';\n\n\tif(props.selected !== undefined) {\n\t\tzipcode = ' ' + props.selected + '?';\n\t}\n\n\tvar rows = [];\n\tvar total = 0;\n\n\tif(props.data !== undefined) {\n\n\t\tvar i;\n\t\tfor(i = 0; i < props.data.length; i++) {\n\n\t\t\ttotal += parseInt(props.data[i]['count_spc_common']);\n\n\t\t\trows.push(\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"entry\">{titleCase(props.data[i]['spc_common'])}:</div>\n\t\t\t\t\t<div className=\"entry\">{props.data[i]['count_spc_common']}</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\tif(rows.length !== 0) {\n\t\trows.unshift(\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"entry\">Total Street Trees:</div>\n\t\t\t\t<div className=\"entry\">{total}</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tif(rows.length === 0 && props.data !== undefined) {\n\t\trows = <div>There doesn't seem to be any data on this zipcode</div>\n\t}\n\n\treturn(\n\t\t<div className=\"compare-wrapper\">\n\t\t\t<div className=\"compare\">\n\t\t\t\t<header>\n\t\t\t\t\tHow green is: {zipcode}\n\t\t\t\t</header>\n\t\t\t\t<div className=\"table-wrapper\">\n\t\t\t\t\t<div className=\"table\">\n\t\t\t\t\t\t{rows}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t      <footer>\n\t      \t<div className=\"footer-left\">Nicolas Shak</div>\n\t      \t<div>Data Based on 1995 Tree Census</div>\n\t      </footer>\n\t     </div>\n    </div>\n\t);\n}\n\nexport default CompareTable;","import React, { Component } from 'react';\nimport './css/App.css';\nimport ChoroplethMap from './ChoroplethMap';\nimport CompareTable from './CompareTable';\nimport totalTrees from './TotalTrees.json';\n\nconst API = 'https://data.cityofnewyork.us/resource/y75w-icrw.json'\n\nclass App extends Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.state = {\n      hover: '00000',\n      selected: undefined,\n      center: [ -73.915242, 40.730610],\n      zoom: 1,\n      valueMap: totalTrees\n    }\n\n    this.onHover = this.onHover.bind(this);\n    this.selectArea = this.selectArea.bind(this);\n  }\n\n  recenter() {\n\n    this.setState({\n      center: [ -73.915242, 40.730610],\n      zoom: 1\n    });\n  }\n\n  selectArea(feature) {\n\n    this.getStats(feature.properties.postalCode)\n\n    this.setState({\n      selected: feature.properties.postalCode,\n      center: [feature.properties.longitude, feature.properties.latitude],\n      zoom: 2\n    });\n  }\n\n  onHover(feature, e) {\n\n    this.setState({hover: feature.properties.postalCode})\n  }\n\n  getStats(zipcode) {\n\n    var params = [\n      '$select=spc_common, count(spc_common)',\n      `$where=zip_new=${zipcode}`,\n      '$group=spc_common'\n    ]\n\n    var query = API + '?' + params.join('&');\n    fetch(query)\n      .then(response => response.json())\n      .then(data => {\n        \n        this.setState({\n          data: data\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CompareTable selected={this.state.selected} data={this.state.data} />\n        <div className=\"map-wrapper\">\n          <ChoroplethMap\n            selected={this.state.select}\n            valueMap={this.state.valueMap}\n            onFeatureHover={this.onHover}\n            onFeatureClick={this.selectArea}\n            center={this.state.center}\n            zoom={this.state.zoom} />\n          <div className=\"current-wrapper\" onClick={() => this.recenter()}>  \n            <div className=\"current-code\">\n              {this.state.hover}\n            </div>\n            <div className=\"note\">\n              (Click to zoom out)\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}